#!/usr/bin/env ruby
require 'rubygems'
require 'rubygame'
require 'pubnub'
require 'matrix'
require 'pp'

include Rubygame

resolution = [640, 480]

pn = Pubnub.new(:publish_key => 'pub-dad6a0ed-bc25-4a22-be4d-d4695a6a2b4a', :subscribe_key => 'sub-a391c3ba-08f1-11e2-98f5-8d7cd55b77a3')


@screen = Screen.open resolution, 0, [HWSURFACE, DOUBLEBUF]
@screen.title = "JumpJump"
#@screen.show_cursor = false
TTF.setup
point_size = 20
$font = TTF.new "/Library/Fonts/Verdana.ttf", point_size
YELLOW = [ 0xee, 0xee, 0x33]

unless @screen.respond_to? :draw_box
  puts "Don't have SDL_gfx available, can't use draw_box"
  puts "Exiting..."
  exit 1
end

class Player
  include Sprites::Sprite

  def initialize color
    super()

    @image = Surface.new [30,30]
    @image.draw_box_s [0,0], [30,30], color
    @rect = @image.make_rect
    @velocity = [0, 2] #gravity
  end

  def vel_add vel
    @velocity[0] += vel[0]
    @velocity[1] += vel[1]
  end

  def update seconds_passed, walls
    old_velocity = @velocity
    x, y = @velocity
    factor = 500 * seconds_passed
    x *= factor
    y *= factor
    @rect.move! x,y

    # undo x and y separately so you can move without jumping
    @rect.move! 0, -1.0 * y if collides? walls # undo gravity
    @rect.move! -1.0 * x, 0 if collides? walls # undo sideways movement
  end

  def draw on_surface
    @rect.clamp! on_surface.make_rect
    @image.blit on_surface, @rect
  end

  def collides? group
    collide_group(group) != []
  end
end

class Health
  include Sprites::Sprite

  def initialize color
    super()

    @image = Surface.new [30,30]
    @image.draw_box_s [0,0], [30,30], color
    @rect = @image.make_rect
  end
  
  def draw on_surface
    @image.blit on_surface, @rect
  end
end


class Wall
  include Sprites::Sprite
  def initialize pos
    super()

    color = [ 0xc0, 0x10, 0x10]
    @image = Surface.new [80,10]
    @image.draw_box_s [0,0], [80,10], color
    @rect = @image.make_rect
    @rect.topleft = pos
  end

  def draw on_surface
    @image.blit on_surface, @rect
  end
end

@black = Surface.new resolution
@black.blit @screen,[0,0]
@background = Surface.new resolution
@background.blit @screen,[0,0]
@score = Surface.new [640,30]

@clock = Clock.new
@clock.target_framerate = 120
@clock.enable_tick_events

@players=Sprites::Group.new
@walls=Sprites::Group.new
Sprites::UpdateGroup.extend_object @players
Sprites::UpdateGroup.extend_object @walls

@player1 = Player.new [ 0xc0, 0x80, 0x40]
@player2 = Player.new [ 0xc0, 0xc0, 0xa0]
@players << @player1
@players << @player2

@walls << Wall.new([400,400])
@walls << Wall.new([300,300])
@walls << Wall.new([200,200])
@walls << Wall.new([100,100])
@walls.draw @screen

@event_queue = EventQueue.new
@event_queue.enable_new_style_events #enables rubygame 3.0
@player1_is_it_text = $font.render_utf8 "Player 1 is it!", true, YELLOW
@player2_is_it_text = $font.render_utf8 "Player 2 is it!", true, YELLOW

@player1_wins_text = $font.render_utf8 "Player 1 wins!", true, YELLOW
@player2_wins_text = $font.render_utf8 "Player 2 wins!", true, YELLOW

@player1_score = 2000
@player2_score = 2000

@got_message = lambda { |message|
  puts message
  return false
}
pn.subscribe(:channel => :jumpjump, :callback => @got_message)

should_run = true
@player1_is_it = true
@colliding = false
while should_run
  seconds_passed = @clock.tick().seconds

  @event_queue.each do |event|
    case event
    when Events::QuitRequested
      should_run = false
    when Events::KeyPressed 
      case event.key
      when :left
        @player1.vel_add [-1,0] 
      when :right
        @player1.vel_add [ 1,0] 
      when :up
        @player1.vel_add [0,-4]
      when :a
        @player2.vel_add [-1,0] 
      when :d
        @player2.vel_add [ 1,0] 
      when :w
        @player2.vel_add [0,-4] 
      end
    when Events::KeyReleased 
      @player1.vel_add [ 1,0] if event.key == :left
      @player1.vel_add [-1,0] if event.key == :right
      @player1.vel_add [0,4] if event.key == :up
      @player2.vel_add [ 1,0] if event.key == :a
      @player2.vel_add [-1,0] if event.key == :d
      @player2.vel_add [0,4] if event.key == :w
    end
  end
  tmp = @player1.collide(@player2) != [] 
  if tmp and !@colliding
    @player1_is_it = !@player1_is_it
    @colliding = true
    @black.blit @background, [0,0]
    @walls.draw @background
    if @player1_is_it
      @player1_is_it_text.blit @background, [10,40]
    else
      @player2_is_it_text.blit @background, [320,40]
    end
    @background.blit @screen, [0,0]
  elsif !tmp and @colliding
    @colliding = false
  end
  if @player1_score or @player2_score == 0
    if @player1_score  == 0
       @player2_wins_text.blit @background, [220,250]
       should_run =false
    elsif @player2_score  == 0
      @player1_wins_text.blit @background, [220,250]
      should_run =false
    end
    @background.blit @screen, [0,0]
  end

  @black.blit @score, [0,0]
  player1_score_text = $font.render_utf8 @player1_score.to_s, true, YELLOW
  player2_score_text = $font.render_utf8 @player2_score.to_s, true, YELLOW
  player1_score_text.blit @score, [0,0]
  player2_score_text.blit @score, [320,0]
  @score.blit @screen, [0,0]


  if @player1_is_it
    if @player1_score > 0
    @player1_score -= 1
    end
  else
    if @player2_score > 0
    @player2_score -= 1
    end
  end

  @players.undraw @screen, @background
  @players.update seconds_passed, @walls
  @players.draw @screen
  @screen.flip
end

