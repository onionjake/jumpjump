#!/usr/bin/ruby
require 'rubygems'
require 'rubygame'
require 'matrix'
require 'pp'

include Rubygame

resolution = [640, 480]

@screen = Screen.open resolution, 0, [HWSURFACE, DOUBLEBUF]
@screen.title = "JumpJump"
#@screen.show_cursor = false

unless @screen.respond_to? :draw_box
  puts "Don't have SDL_gfx available, can't use draw_box"
  puts "Exiting..."
  exit 1
end

class Player
  include Sprites::Sprite

  def initialize
    super()

    color = [ 0xc0, 0x80, 0x40]
    @image = Surface.new [30,30]
    @image.draw_box_s [0,0], [30,30], color
    @rect = @image.make_rect
    @velocity = Vector[0, 2] #gravity
  end

  def vel_add vel
    @velocity += vel
  end

  def update seconds_passed
    @rect.topleft = (Vector.elements(@rect.topleft) + @velocity*10).to_a
  end

  def draw on_surface
    @rect.clamp! on_surface.make_rect
    @image.blit on_surface, @rect
  end
end

@clock = Clock.new
@clock.target_framerate = 60
@clock.enable_tick_events

@sprites=Sprites::Group.new
Sprites::UpdateGroup.extend_object @sprites
@player = Player.new
@sprites << @player

@background = Surface.new resolution
@background.blit @screen,[0,0]

@event_queue = EventQueue.new
@event_queue.enable_new_style_events #enables rubygame 3.0

should_run = true
while should_run
  seconds_passed = @clock.tick().seconds

  @event_queue.each do |event|
    puts event
    case event
    when Events::QuitRequested
      should_run = false
    when Events::KeyPressed 
      @player.vel_add Vector[-1,0] if event.key == :left
      @player.vel_add Vector[ 1,0] if event.key == :right
      @player.vel_add Vector[0,-4] if event.key == :up
    when Events::KeyReleased 
      @player.vel_add Vector[ 1,0] if event.key == :left
      @player.vel_add Vector[-1,0] if event.key == :right
      @player.vel_add Vector[0,4] if event.key == :up
    end
  end

  @sprites.undraw @screen, @background
  @sprites.update seconds_passed
  @sprites.draw @screen
  @screen.flip
end

